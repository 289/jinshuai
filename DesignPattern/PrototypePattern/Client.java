package PrototypePattern;

/**
 * Autor: jinshuai
 * Date: 2014/8/14
 * Time: 23:34
 *
 * prototype pattern称为原型模式
 在软件系统中，经常面临着“某些结构复杂的对象”的创建工作，由于需求的变化，
 这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。
 Prototype设计模式，就是为了解决如何向“客户程序”隔离出“这些易变对象”，
 从而使得“依赖这些易变对象的客户程序”不随着需求的改变而改变。
 Prototype设计模式指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。
 要点：
 Prototype设计模式同样用于隔离类对象的使用者和具体类型(易变类)之间的耦合关系，它同样要求这些“易变类”拥有“稳定的接口”。
 Prototype设计模式对于“如何创建易变类的实体对象”采用“原型克隆”的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象，所需要的工作仅仅是注册一个新类的对象(即原型)，然后在需要的地方不断地Clone
 Clone时要注意使用Deep Clone。
 深拷贝与浅拷贝区别：
 浅拷贝也称位拷贝，就是对象的数据成员之间的简单赋值，例如一个类我们没有具体定义其拷贝构造函数当用该类的一个对象去给令一个对象赋值时所执行的过程就是浅拷贝。
 如果对象中没有其他的资源（如：堆，文件，系统资源等），则深拷贝和浅拷贝没有什么区别，但是如果有那么浅拷贝只是简单的引用这些资源，而深拷贝是会复制这些资源的。
 */
public class Client {
	public static void main(String[] args){
		Prototype prototype=new Prototype();
		Prototype prototype1=prototype.clone();
	}
}
